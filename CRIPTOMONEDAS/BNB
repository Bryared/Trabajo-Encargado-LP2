import requests
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import os

# ---------------- CONFIGURACI√ìN GENERAL ----------------
ID_ACTIVO = "binancecoin"  # ‚úÖ Nombre correcto del activo para la API de CoinGecko
API_URL = f"https://api.coingecko.com/api/v3/coins/{ID_ACTIVO}/market_chart"
PARAMS = {
    "vs_currency": "usd",
    "days": "30",
    "interval": "daily"
}

CSV_LIMPIO = f"datos_limpios_{ID_ACTIVO}.csv"
GRAFICO_PATH = f"grafico_precio_{ID_ACTIVO}.png"

# ---------------- EXTRACCI√ìN DE DATOS ----------------
def extraer_datos():
    print("üì° Conectando a la API de CoinGecko...")
    response = requests.get(API_URL, params=PARAMS)
    
    if response.status_code != 200:
        print("‚ùå Error al acceder a la API:", response.status_code)
        print("Respuesta:", response.text)
        return None

    data = response.json()
    
    if "prices" not in data:
        print("‚ùå La respuesta no contiene datos de precios.")
        print("Respuesta:", data)
        return None

    return data["prices"]

# ---------------- LIMPIEZA ----------------
def limpiar_datos(precios_raw):
    print("üßπ Limpiando y estructurando datos...")
    datos = []
    for timestamp, precio in precios_raw:
        fecha = datetime.fromtimestamp(timestamp / 1000).date()
        if precio > 0:
            datos.append({
                "Fecha": fecha,
                "Precio_USD": round(precio, 2)
            })

    df = pd.DataFrame(datos)
    df.to_csv(CSV_LIMPIO, index=False)
    print(f"‚úÖ Datos limpios guardados en: {CSV_LIMPIO}")
    return df

# ---------------- AN√ÅLISIS + VISUALIZACI√ìN ----------------
def analizar_y_visualizar(df):
    print("\nüìä An√°lisis descriptivo del precio (USD):")
    print(df["Precio_USD"].describe())

    print("\nüìà Generando gr√°fico...")
    plt.figure(figsize=(12, 6))
    plt.plot(df["Fecha"], df["Precio_USD"], label="Precio BNB", color="#f3ba2f")
    plt.title("Evoluci√≥n del Precio de BNB (√∫ltimos 30 d√≠as)", fontsize=16)
    plt.xlabel("Fecha")
    plt.ylabel("Precio en USD")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.savefig(GRAFICO_PATH)
    plt.show()
    print(f"‚úÖ Gr√°fico guardado en: {GRAFICO_PATH}")

# ---------------- MAIN ----------------
def main():
    precios = extraer_datos()
    if precios is None:
        return

    df = limpiar_datos(precios)
    analizar_y_visualizar(df)

if __name__ == "__main__":
    main()

